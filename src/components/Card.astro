---
interface Props {
  matchStatus: string;
  matchDate: string;
  homeName: string;
  awayName: string;
  homeCrest: string;
  awayCrest: string;
  awayScore: string;
  homeScore: string;
}

const {
  matchStatus,
  matchDate,
  homeName,
  awayName,
  homeCrest,
  awayCrest,
  awayScore,
  homeScore,
} = Astro.props;

// https://docs.football-data.org/general/v4/match.html#_status_workflow_explained
function formatMatchStatus(status: any) {
  switch (status) {
    case "FINISHED":
      return { text: "Full-time" };
    case "TIMED":
    case "SCHEDULED":
      return "";
    case "IN_PLAY":
    case "PAUSED":
      return { text: "Live", className: "live" }; // Red "Live"
    default:
      return status;
  }
}

function formatDate(dateString: string) {
  const date = new Date(dateString);

  // Check for relative dates (yesterday, today, tomorrow)
  const today = new Date();
  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);

  if (date.toDateString() === today.toDateString()) {
    return "Today";
  } else if (date.toDateString() === yesterday.toDateString()) {
    return "Yesterday";
  } else if (date.toDateString() === tomorrow.toDateString()) {
    return "Tomorrow";
  }

  // Format the date (e.g., "27th October 2024")
  const options: Intl.DateTimeFormatOptions = {
    day: "numeric",
    month: "long",
    year: "numeric",
  };
  let formattedDate = date.toLocaleDateString("en-GB", options);

  // Add ordinal suffixes (st, nd, rd, th)
  const day = date.getDate();
  const suffixes = ["th", "st", "nd", "rd"]; // Reordered suffixes
  const specialCases = [11, 12, 13];
  let suffixIndex = 0; // Default to 'th'
  if (!specialCases.includes(day % 100)) {
    suffixIndex =
      Math.min(day % 10, 4) - (day % 10 > 10 && day % 10 < 14 ? 1 : 0);
  }

  const parts = formattedDate.split(" ");
  parts[0] = parts[0] + suffixes[suffixIndex];
  formattedDate = parts.join(" ");

  return formattedDate;
}
---

<article class="link-card">
  <header>
    <h2>
      {formatDate(matchDate)} at Xpm
    </h2>

    {
      formatMatchStatus(matchStatus) && (
        <span class={formatMatchStatus(matchStatus).className}>
          {formatMatchStatus(matchStatus).text}
        </span>
      )
    }
  </header>
  <div>
    <div>
      <img src={homeCrest} alt=`Crest for {homeName}` />
      <h4>{homeName ? homeName : "Home Team"}</h4>
      <span class="score">{homeScore}</span>
    </div>
    <div>
      <img src={awayCrest} alt=`Crest for {awayName}` />
      <h4>{awayName ? awayName : "Away Team"}</h4>
      <span class="score">{awayScore}</span>
    </div>
  </div>
</article>

<style>
  .live {
    color: red;
  }
  .score {
    /* opacity: 0.1; */
    filter: blur(8px);
    transition: 0.3s ease-in-out;
    /* content: "0"; */
  }
  .link-card.scores-shown {
    .score {
      filter: blur(0);
    }
  }
  img {
    width: 64px;
  }
  /* Existing styles */
  .link-card {
    list-style: none;
    display: flex;
    padding: 1px;
    background-color: #23262d;
    background-image: none;
    background-size: 400%;
    border-radius: 7px;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  }
  .link-card > div,
  header {
    width: 100%;
    text-decoration: none;
    line-height: 1.4;
    padding: calc(1.5rem - 1px);
    border-radius: 8px;
    color: white;
    background-color: #23262d;
    opacity: 0.8;
  }
  h2 {
    margin: 0;
    font-size: 1.25rem;
    transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
  }
  p {
    margin-top: 0.5rem;
    margin-bottom: 0;
  }
  .link-card:is(:hover, :focus-within) {
    background-position: 0;
    background-image: var(--accent-gradient);
  }
  .link-card:is(:hover, :focus-within) h2 {
    color: rgb(var(--accent-light));
  }
</style>
