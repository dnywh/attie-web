---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";

// Out out of pre-rendering (to use SSR)
export const prerender = false;
// Get data when page is rendered
// Test data
// const response = await fetch("https://randomuser.me/api/");
// const data = await response.json();
// const randomUser = data.results[0];

// const test = await import.meta.env.FD_AUTH_TOKEN;

import { getMatchData } from "./api/matches.js";
const { body: groupedMatches } = await getMatchData(); // Extract the body property

const now = new Date();
---

<Layout title="Welcome to Astro.">
  <main>
    <!-- <h1>{matches}</h1> -->
    <!-- <h1>User</h1>
    <h2>{randomUser.name.first} {randomUser.name.last}</h2>
    <h3>{randomUser.location.city}, {randomUser.location.country}</h3> -->
    <header>
      <nav>
        <div class="scores-control">
          <!-- https://danklammer.com/articles/simple-css-toggle-switch/ -->
          <span>Scores</span>
          <input class="toggle" type="checkbox" />
        </div>
        <h1>Attie</h1>
        <a href="#today-or-older-matches">Today</a>
      </nav>
    </header>

    <script>
      // Show or hide scores depending on toggle (checkbox) value
      const checkboxes = document.querySelectorAll(
        'input[type="checkbox"]'
      ) as NodeListOf<HTMLInputElement>;
      const cards = document.querySelectorAll(".link-card");

      checkboxes.forEach((checkbox) => {
        checkbox.addEventListener("change", () => {
          if (checkbox.checked) {
            cards.forEach((card) => card.classList.add("scores-shown"));
          } else {
            cards.forEach((card) => card.classList.remove("scores-shown"));
          }
        });
      });
    </script>

    <ul>
      {
        // Future games
        Object.entries(groupedMatches)
          .filter(([date]) => new Date(date) >= now)
          .map(([date, matches]) => (
            <li id="future-games" class="game-cluster">
              <h3>{date}</h3>
              <ul>
                {matches.map((match: any) => (
                  <li>
                    <Card
                      matchStatus={match.status}
                      matchDate={match.utcDate}
                      homeCrest={match.homeTeam.crest}
                      awayCrest={match.awayTeam.crest}
                      homeName={match.homeTeam.shortName}
                      homeScore={match.score.fullTime.home}
                      awayName={match.awayTeam.shortName}
                      awayScore={match.score.fullTime.away}
                    />
                  </li>
                ))}
              </ul>
            </li>
          ))
      }

      {
        // Current or older games
        Object.entries(groupedMatches)
          .filter(([date]) => new Date(date) < now)
          .map(([date, matches]) => (
            <li id="today-or-older-matches" class="game-cluster">
              <h3>{date}</h3>
              <ul>
                {matches.map((match: any) => (
                  <li>
                    <Card
                      matchStatus={match.status}
                      matchDate={match.utcDate}
                      homeCrest={match.homeTeam.crest}
                      awayCrest={match.awayTeam.crest}
                      homeName={match.homeTeam.shortName}
                      homeScore={match.score.fullTime.home}
                      awayName={match.awayTeam.shortName}
                      awayScore={match.score.fullTime.away}
                    />
                  </li>
                ))}
              </ul>
            </li>
          ))
      }
    </ul>

    <script>
      const todayOrOlderMatches = document.querySelector(
        "#today-or-older-matches"
      );
      window.addEventListener("DOMContentLoaded", () => {
        if (todayOrOlderMatches) {
          const yOffset =
            todayOrOlderMatches.getBoundingClientRect().top + window.scrollY;
          window.scrollTo({ top: yOffset, behavior: "auto" }); // Instant scroll
        }
        // Enable smooth scrolling after the initial scroll
        document.documentElement.style.scrollBehavior = "smooth";
      });
    </script>
  </main>

  <style>
    ul {
      list-style-type: none;
      padding-left: 0;
    }

    header {
      position: sticky;

      background-color: black;
      top: 0;
      z-index: 1;

      nav {
        display: flex;
        flex-direction: row;
        align-items: baseline;
        justify-content: space-between;
      }

      h1 {
        font-size: 2rem;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        margin-bottom: 1em;
      }
    }

    .game-cluster {
      /* Set to equal height of navigation */
      padding-top: 6rem;
    }

    .scores-control {
      display: flex;
      gap: 0.5rem;
      align-items: center;
      span {
        font-size: 12pt;
      }
    }
    /* Toggle */
    .toggle {
      appearance: none;
      position: relative;
      display: inline-block;
      box-sizing: content-box;
      width: 4.5em;
      height: 2em;
      padding: 0.2em;
      border: none;
      cursor: pointer;
      border-radius: 1.5em;
      overflow: hidden;
      background-color: #707070;
      transition: background ease 0.3s;
    }

    .toggle:before {
      content: "on off";
      display: block;
      position: absolute;
      z-index: 2;
      width: 2em;
      height: 2em;
      font-family: system-ui;
      font-size: 1em;
      line-height: 2em;
      font-weight: 500;
      text-transform: uppercase;
      text-indent: -2em;
      word-spacing: 2.55em;
      text-shadow: -1px -1px rgba(0, 0, 0, 0.15);
      white-space: nowrap;
      background: #fff;
      color: #fff;
      border-radius: 1.5em;
      transition: transform cubic-bezier(0.3, 1.5, 0.7, 1) 0.3s;
    }

    .toggle:checked {
      background-color: #4cd964;
    }

    .toggle:checked:before {
      transform: translateX(2.5em);
      color: #000;
    }

    /* Everything else */
    main {
      margin: auto;
      padding: 1rem;
      width: 800px;
      max-width: calc(100% - 2rem);
      color: white;
      font-size: 20px;
      line-height: 1.6;
    }
  </style>
</Layout>
